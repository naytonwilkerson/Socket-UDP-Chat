/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package socketsudp;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Nayton Wilkerson
 */
public class ChatCliente extends javax.swing.JFrame {
    /**
     * Creates new form ChatCliente
     */
    Cliente cliente;
    String texto;
    
    public ChatCliente() throws UnknownHostException, SocketException {
        initComponents();
        cliente = new Cliente();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        envia = new javax.swing.JButton();
        Texto = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        recebeTexto = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        envia.setText("Send");
        envia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviaActionPerformed(evt);
            }
        });

        Texto.setToolTipText("");
        Texto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextoActionPerformed(evt);
            }
        });

        recebeTexto.setColumns(20);
        recebeTexto.setRows(5);
        jScrollPane1.setViewportView(recebeTexto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(27, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Texto)
                        .addGap(18, 18, 18)
                        .addComponent(envia)
                        .addGap(19, 19, 19))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(envia, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(Texto))
                .addGap(31, 31, 31))
        );

        Texto.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void TextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextoActionPerformed

    private void enviaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviaActionPerformed
            // TODO add your handling code here:
            
            texto = Texto.getText();
            recebeTexto.append("\n Você Disse: "+texto);
            cliente.enviaMSG(texto);
            Texto.setText("");
    }//GEN-LAST:event_enviaActionPerformed

    /**
     * @param texto
     * @param args the command line arguments
     */
    
    public void setText(String texto){
        System.out.println("tela");
        recebeTexto.append("\n Disse: "+texto);
    }
    
    public static void main(String args[]) throws UnknownHostException, SocketException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        new ChatCliente().setVisible(true);
       
    }
    
    
    
    public class Cliente extends Thread {

    private  DatagramSocket s;
    ChatCliente chatCliente;
    InetAddress dest;
    DatagramPacket resposta;
 
    public Cliente () throws UnknownHostException, SocketException{
            
    }
    
    public Cliente(DatagramSocket n, InetAddress det){
            s = n;
            dest = det;
    }
    
    public void enviaMSG(String texto){
          try { 
              
            System.out.println("Iniciando: "+texto);
            
            if(dest==null&&s==null){
           
                s = new DatagramSocket();    
                dest = InetAddress.getByName("localhost");
            
                Thread t = new Cliente(s, dest);
                t.start();
           
            }else{
                System.out.println("Já há instância");
           }
  
            byte[] buffer = texto.getBytes();
            DatagramPacket msg = new DatagramPacket(buffer,buffer.length, dest, 4545);
            s.send(msg);
              System.out.println("Enviado");

        } catch (UnknownHostException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SocketException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    

    @Override
    public void run(){
        try {
          
           String Dados;
           if(resposta==null){
                resposta = new DatagramPacket(new byte[1024], 1024);
           }
           s.receive(resposta);
           
           do{
                Dados = "";
                for(int i = 0; i < resposta.getLength(); i++){
                    Dados += ((char) resposta.getData()[i]);
                    
                }
                System.out.println(Dados +" Recebeu");
                
                chatCliente = new ChatCliente();
                chatCliente.setText(Dados);
               
                s.receive(resposta);
                  
           }while(!Dados.equals("")); 
           
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        } 
    }

    }

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextField Texto;
    private javax.swing.JButton envia;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea recebeTexto;
    // End of variables declaration//GEN-END:variables
}

